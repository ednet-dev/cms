part of ednet_core;

/// Represents an aggregate root in Domain-Driven Design.
///
/// The [AggregateRoot] class serves as a transactional consistency boundary:
/// - Contains a cluster of domain objects treated as a unit
/// - Enforces invariants across all contained objects
/// - Is the only object that outside references can directly hold
/// - Handles commands and emits events
///
/// This class extends the base [model.AggregateRoot] class to ensure 
/// compatibility with the core domain model while adding application-specific
/// functionality like event tracking and command processing.
///
/// Example usage:
/// ```dart
/// class Order extends AggregateRoot<Order> {
///   String customerId;
///   List<OrderLine> orderLines = [];
///   OrderStatus status = OrderStatus.created;
///
///   Order({required this.customerId});
///
///   bool processShipOrder(ShipOrderCommand command) {
///     if (status != OrderStatus.paid) {
///       return false;
///     }
///     
///     status = OrderStatus.shipped;
///     addEvent(OrderShippedEvent(orderId: id.toString()));
///     return true;
///   }
/// }
/// ```
abstract class AggregateRoot<T extends AggregateRoot<T>> extends model.AggregateRoot {
  /// The list of uncommitted domain events generated by this aggregate.
  final List<IDomainEvent> _uncommittedEvents = [];

  /// A version number for optimistic concurrency control.
  int version = 0;

  /// Processes a command and applies its effects to this aggregate.
  ///
  /// This method should:
  /// 1. Validate the command
  /// 2. Apply its effects
  /// 3. Generate domain events
  ///
  /// Parameters:
  /// - [command]: The command to process
  ///
  /// Returns:
  /// True if the command was successfully processed, false otherwise
  bool processCommand(ICommand command) {
    return command.doIt();
  }

  /// Adds a domain event to the list of uncommitted events.
  ///
  /// Parameters:
  /// - [event]: The domain event to add
  void addEvent(IDomainEvent event) {
    _uncommittedEvents.add(event);
  }

  /// Gets the list of uncommitted domain events.
  ///
  /// Returns:
  /// The list of uncommitted domain events
  List<IDomainEvent> getUncommittedEvents() {
    return List.unmodifiable(_uncommittedEvents);
  }

  /// Clears the list of uncommitted domain events.
  ///
  /// This should be called after the events have been processed.
  void clearUncommittedEvents() {
    _uncommittedEvents.clear();
  }

  /// Applies a domain event to this aggregate.
  ///
  /// This method should be called when:
  /// - Reconstructing an aggregate from its event history
  /// - Applying new events during command processing
  ///
  /// Parameters:
  /// - [event]: The domain event to apply
  void applyEvent(IDomainEvent event) {
    // To be implemented by subclasses
  }

  /// Increments the version number of this aggregate.
  ///
  /// This should be called:
  /// - When the aggregate is saved
  /// - When reconstituting from event history
  void incrementVersion() {
    version++;
  }
  
  /// Converts this aggregate's uncommitted events to the base Event type
  /// for compatibility with the domain model.
  ///
  /// Returns:
  /// A list of base Event objects
  List<Event> toBaseEvents() {
    return _uncommittedEvents.map((e) => 
      Event(
        name: e.name,
        timestamp: e.timestamp,
        id: e.id
      )
    ).toList();
  }
} 