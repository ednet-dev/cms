part of ednet_core;

/// Defines the interface for commands in the EDNet Core framework.
///
/// Commands represent intentions to change the state of the domain. They:
/// - Are named with imperative verbs
/// - Contain all data needed to execute the action
/// - Are handled by a single handler
/// - May generate domain events
///
/// This interface ensures that all commands:
/// - Have a unique identifier
/// - Have a timestamp
/// - Have a command name
/// - Can be executed (doIt)
/// - Can be undone (undoIt)
/// - Can provide generated events
///
/// Example usage:
/// ```dart
/// class CreateOrderCommand implements ICommand {
///   @override
///   final String id = Uuid().v4();
///
///   @override
///   final DateTime timestamp = DateTime.now();
///
///   @override
///   final String name = 'CreateOrder';
///
///   final String customerId;
///   final List<OrderLineItem> items;
///   final List<IDomainEvent> _events = [];
///
///   CreateOrderCommand({
///     required this.customerId,
///     required this.items,
///   });
///
///   @override
///   bool doIt() {
///     // Implementation
///     _events.add(OrderCreatedEvent(...));
///     return true;
///   }
///
///   @override
///   bool undoIt() {
///     // Implementation
///     return true;
///   }
///
///   @override
///   List<IDomainEvent> getEvents() => _events;
/// }
/// ```
abstract class ICommand {
  /// The unique identifier for this command.
  String get id;

  /// The timestamp when this command was created.
  DateTime get timestamp;

  /// The name of this command.
  String get name;

  /// Executes this command.
  ///
  /// Returns:
  /// True if the command was successfully executed, false otherwise
  bool doIt();

  /// Undoes the effects of this command.
  ///
  /// Returns:
  /// True if the command was successfully undone, false otherwise
  bool undoIt();

  /// Gets the events generated by this command.
  ///
  /// Returns:
  /// The list of domain events generated by this command
  List<IDomainEvent> getEvents();
}

/// Base implementation of a command.
///
/// The [Command] class provides a standard implementation of [ICommand]:
/// - Automatically generates a unique identifier
/// - Records the current timestamp
/// - Requires a name
/// - Manages generated events
/// - Provides default implementations of [doIt] and [undoIt]
///
/// Example usage:
/// ```dart
/// class ShipOrderCommand extends Command {
///   final String orderId;
///   final String trackingNumber;
///   final Order? order;
///
///   ShipOrderCommand({
///     required this.orderId,
///     required this.trackingNumber,
///     this.order,
///   }) : super(name: 'ShipOrder');
///
///   @override
///   bool doIt() {
///     if (order == null) return false;
///
///     if (order!.status != OrderStatus.paid) {
///       return false;
///     }
///
///     order!.status = OrderStatus.shipped;
///     order!.trackingNumber = trackingNumber;
///     
///     addEvent(OrderShippedEvent(
///       orderId: orderId,
///       trackingNumber: trackingNumber,
///       entity: order,
///     ));
///     
///     return true;
///   }
///
///   @override
///   bool undoIt() {
///     if (order == null) return false;
///     
///     order!.status = OrderStatus.paid;
///     order!.trackingNumber = null;
///     
///     return true;
///   }
/// }
/// ```
class Command implements ICommand {
  @override
  final String id;

  @override
  final DateTime timestamp;

  @override
  final String name;

  /// The list of events generated by this command.
  final List<IDomainEvent> _events = [];

  /// Creates a new command.
  ///
  /// Parameters:
  /// - [name]: The name of the command
  /// - [id]: Optional custom identifier (defaults to a UUID)
  /// - [timestamp]: Optional custom timestamp (defaults to now)
  Command({
    required this.name,
    String? id,
    DateTime? timestamp,
  })  : id = id ?? Oid().toString(),
        timestamp = timestamp ?? DateTime.now();

  @override
  bool doIt() {
    // Default implementation, subclasses should override
    return false;
  }

  @override
  bool undoIt() {
    // Default implementation, subclasses should override
    return false;
  }

  /// Adds an event to the list of generated events.
  ///
  /// Parameters:
  /// - [event]: The domain event to add
  void addEvent(IDomainEvent event) {
    _events.add(event);
  }

  @override
  List<IDomainEvent> getEvents() {
    return List.unmodifiable(_events);
  }
} 