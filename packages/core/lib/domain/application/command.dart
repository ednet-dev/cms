// part of ednet_core;
//
// /// Defines the interface for commands in the EDNet Core framework.
// ///
// /// Commands represent intentions to change the state of the domain. They:
// /// - Are named with imperative verbs
// /// - Contain all data needed to execute the action
// /// - Are handled by a single handler
// /// - May generate domain events
// ///
// /// This interface extends the base [commands.ICommand] interface to ensure
// /// compatibility with the core domain model while adding application-specific
// /// functionality.
// ///
// /// Example usage:
// /// ```dart
// /// class CreateOrderCommand implements ICommand {
// ///   @override
// ///   final String id = Uuid().v4();
// ///
// ///   @override
// ///   final DateTime timestamp = DateTime.now();
// ///
// ///   @override
// ///   final String name = 'CreateOrder';
// ///
// ///   final String customerId;
// ///   final List<OrderLineItem> items;
// ///   final List<IDomainEvent> _events = [];
// ///
// ///   CreateOrderCommand({
// ///     required this.customerId,
// ///     required this.items,
// ///   });
// ///
// ///   @override
// ///   bool doIt() {
// ///     // Implementation
// ///     _events.add(OrderCreatedEvent(...));
// ///     return true;
// ///   }
// ///
// ///   @override
// ///   bool undoIt() {
// ///     // Implementation
// ///     return true;
// ///   }
// ///
// ///   @override
// ///   List<IDomainEvent> getEvents() => _events;
// /// }
// /// ```
// abstract class ICommand extends commands.ICommand {
//   /// The unique identifier for this command.
//   String get id;
//
//   /// The timestamp when this command was created.
//   DateTime get timestamp;
//
//   /// Gets the events generated by this command.
//   ///
//   /// Returns:
//   /// The list of domain events generated by this command
//   @override
//   List<IDomainEvent> getEvents();
//
//   /// Executes this command.
//   ///
//   /// Returns:
//   /// True if the command was successfully executed, false otherwise
//   @override
//   bool doIt();
//
//   /// Undoes the effects of this command.
//   ///
//   /// Returns:
//   /// True if the command was successfully undone, false otherwise
//   bool undoIt();
//
//   /// The category of this command (for grouping and filtering).
//   /// Default implementation returns a general category.
//   @override
//   String get category => 'application';
//
//   /// A description of this command.
//   /// Default implementation returns the command name.
//   @override
//   String get description => name;
//
//   /// Event fired when this command succeeds.
//   /// Default implementation returns null.
//   @override
//   Event get successEvent => Event(name: '${name}Succeeded');
//
//   /// Event fired when this command fails.
//   /// Default implementation returns null.
//   @override
//   Event get failureEvent => Event(name: '${name}Failed');
//
//   /// Whether this command has been executed.
//   @override
//   bool get done => false;
//
//   /// Whether this command has been undone.
//   @override
//   bool get undone => false;
//
//   /// Whether this command has been redone.
//   @override
//   bool get redone => false;
//
//   /// Redoes this command after it has been undone.
//   ///
//   /// Returns:
//   /// True if the command was successfully redone, false otherwise
//   @override
//   bool redo() => doIt();
//
//   /// Undoes this command.
//   ///
//   /// Returns:
//   /// True if the command was successfully undone, false otherwise
//   @override
//   bool undo() => undoIt();
// }
//
// /// Base implementation of a command.
// ///
// /// The [Command] class provides a standard implementation of [ICommand]:
// /// - Automatically generates a unique identifier
// /// - Records the current timestamp
// /// - Requires a name
// /// - Manages generated events
// /// - Provides default implementations of [doIt] and [undoIt]
// ///
// /// Example usage:
// /// ```dart
// /// class ShipOrderCommand extends Command {
// ///   final String orderId;
// ///   final String trackingNumber;
// ///   final Order? order;
// ///
// ///   ShipOrderCommand({
// ///     required this.orderId,
// ///     required this.trackingNumber,
// ///     this.order,
// ///   }) : super(name: 'ShipOrder');
// ///
// ///   @override
// ///   bool doIt() {
// ///     if (order == null) return false;
// ///
// ///     if (order!.status != OrderStatus.paid) {
// ///       return false;
// ///     }
// ///
// ///     order!.status = OrderStatus.shipped;
// ///     order!.trackingNumber = trackingNumber;
// ///
// ///     addEvent(OrderShippedEvent(
// ///       orderId: orderId,
// ///       trackingNumber: trackingNumber,
// ///       entity: order,
// ///     ));
// ///
// ///     return true;
// ///   }
// ///
// ///   @override
// ///   bool undoIt() {
// ///     if (order == null) return false;
// ///
// ///     order!.status = OrderStatus.paid;
// ///     order!.trackingNumber = null;
// ///
// ///     return true;
// ///   }
// /// }
// /// ```
// class Command implements ICommand {
//   @override
//   final String id;
//
//   @override
//   final DateTime timestamp;
//
//   @override
//   final String name;
//
//   @override
//   final String category;
//
//   @override
//   final String description;
//
//   bool _isDone = false;
//   bool _isUndone = false;
//   bool _isRedone = false;
//
//   /// The list of events generated by this command.
//   final List<IDomainEvent> _events = [];
//
//   /// Creates a new command.
//   ///
//   /// Parameters:
//   /// - [name]: The name of the command
//   /// - [category]: Optional category (defaults to 'application')
//   /// - [description]: Optional description (defaults to name)
//   /// - [id]: Optional custom identifier (defaults to a UUID)
//   /// - [timestamp]: Optional custom timestamp (defaults to now)
//   Command({
//     required this.name,
//     this.category = 'application',
//     String? description,
//     String? id,
//     DateTime? timestamp,
//   })  : id = id ?? Oid().toString(),
//         timestamp = timestamp ?? DateTime.now(),
//         description = description ?? name;
//
//   @override
//   bool doIt() {
//     // Default implementation, subclasses should override
//     _isDone = true;
//     return false;
//   }
//
//   @override
//   bool undoIt() {
//     // Default implementation, subclasses should override
//     _isUndone = true;
//     return false;
//   }
//
//   @override
//   bool redo() {
//     _isRedone = true;
//     return doIt();
//   }
//
//   @override
//   bool undo() {
//     return undoIt();
//   }
//
//   @override
//   bool get done => _isDone;
//
//   @override
//   bool get undone => _isUndone;
//
//   @override
//   bool get redone => _isRedone;
//
//   @override
//   Event get successEvent => Event(name: '${name}Succeeded');
//
//   @override
//   Event get failureEvent => Event(name: '${name}Failed');
//
//   /// Adds an event to the list of generated events.
//   ///
//   /// Parameters:
//   /// - [event]: The domain event to add
//   void addEvent(IDomainEvent event) {
//     _events.add(event);
//   }
//
//   @override
//   List<IDomainEvent> getEvents() {
//     return List.unmodifiable(_events);
//   }
// }