part of ednet_core;

/// Defines the interface for a domain session in the EDNet Core framework.
///
/// A domain session represents a unit of work within the domain layer, providing:
/// - Access to domain models and their state
/// - Command execution and event handling
/// - Policy enforcement
/// - Transaction management
///
/// This interface ensures that all domain sessions:
/// - Have access to the current [domainModels]
/// - Can track the [past] history of commands
/// - Can execute commands and handle events
///
/// Example usage:
/// ```dart
/// final session = DomainSession(domainModels);
/// session.executeCommand(createOrderCommand);
/// ```
abstract class IDomainSession {
  /// The collection of domain models available in this session.
  /// These models represent the current state of the domain.
  IDomainModels get domainModels;

  /// The history of past commands executed in this session.
  /// Used for auditing, replay, and undo/redo operations.
  IPast get past;
}

/// Implements a domain session that manages domain operations and state.
///
/// The [DomainSession] class provides:
/// - Command execution with event handling
/// - Policy enforcement through the [policyEngine]
/// - History tracking via the [past] collection
/// - Access to domain models and their state
///
/// This class is central to the domain layer, ensuring:
/// - Atomic operations through command execution
/// - Event-driven architecture support
/// - Policy compliance
/// - State consistency
///
/// Example usage:
/// ```dart
/// final session = DomainSession(domainModels);
/// 
/// // Execute a command
/// session.executeCommand(createOrderCommand);
/// 
/// // Access domain models
/// final orders = session.domainModels.orders;
/// 
/// // Check command history
/// final lastCommand = session.past.last;
/// ```
class DomainSession implements IDomainSession {
  /// The collection of domain models managed by this session.
  final DomainModels _domainModels;

  /// The history of past commands executed in this session.
  final Past _past;

  /// The policy engine that enforces domain rules and constraints.
  final PolicyEngine policyEngine;

  /// Creates a new domain session with the given [domainModels].
  /// 
  /// Initializes:
  /// - A new [Past] instance for command history
  /// - A [PolicyEngine] for rule enforcement
  /// 
  /// Note: The policy engine is currently initialized with null due to
  /// circular dependency issues that need to be resolved.
  DomainSession(this._domainModels)
      : _past = Past(),
        policyEngine =
            PolicyEngine(null); // We need to fix this circular dependency

  @override
  DomainModels get domainModels => _domainModels;

  @override
  Past get past => _past;

  /// Executes a command and handles its events.
  /// 
  /// This method:
  /// 1. Executes the command via [command.doIt()]
  /// 2. If successful, adds the command to the [past]
  /// 3. Processes any events generated by the command
  /// 4. Enforces policies on affected entities
  /// 
  /// Parameters:
  /// - [command]: The command to execute
  /// 
  /// Example:
  /// ```dart
  /// final command = CreateOrderCommand(orderData);
  /// session.executeCommand(command);
  /// ```
  void executeCommand(ICommand command) {
    if (command.doIt()) {
      past.add(command);
      for (var event in command.getEvents()) {
        // policyEngine.executePolicies(event.entity);
        print('execute policy ${event.name}');
      }
    }
  }
}
