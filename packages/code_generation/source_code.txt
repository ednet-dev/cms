import 'package:ednet_core/ednet_core.dart';

import '../lib/ednet_code_generation.dart';

/// --genall ~/projects/project domain model
/// --gengen ~/projects/project domain model
/// --gengen ~/projects/project/yaml ~/projects/project_mobile_app/domain domain model1 model2 ...
void main(List<String> args) {
  if (args.length >= 5 && (args[0] == '--genall' || args[0] == '--gengen')) {
    domainName = args[3];
    outputDir = args[2];
    domainName = domainName.toLowerCase();
    if (domainName == 'domain') {
      throw EDNetException('domain cannot be the domain name');
    }

    for (var i = 4; i < args.length; i++) {
      modelName = args[i].toLowerCase();
      if (modelName == 'model') {
        throw EDNetException('model cannot be the model name');
      }
      libraryName = '${domainName}_${modelName}';
      // displayYaml(domain: domainName, model: modelName, dir: args[1]);
      createDomainModelFromYaml(
        dir: args[1],
        domain: domainName,
        model: modelName,
      ); // project path as argument
      genProject(args[0], outputDir!);
    }
  } else if (args.length == 4 &&
      (args[0] == '--genall' || args[0] == '--gengen')) {
    domainName = args[2];
    modelName = args[3];
    domainName = domainName.toLowerCase();
    modelName = modelName.toLowerCase();
    if (domainName == modelName) {
      throw EDNetException('domain and model names must be different');
    }
    if (domainName == 'domain') {
      throw EDNetException('domain cannot be the domain name');
    }
    if (modelName == 'model') {
      throw EDNetException('model cannot be the model name');
    }
    libraryName = '${domainName}_${modelName}';
    createDomainModel(args[1]); // project path as argument
    genProject(args[0], args[1]);
  } else {
    print('arguments are not entered properly in Run/Manage Launches of IDE');
  }
}


library ednet_code_generation;

import 'dart:io';
import 'package:ednet_core/ednet_core.dart';
import 'package:ednet_core/gen/ednet_test.dart';
import 'package:yaml/yaml.dart';
import 'package:path/path.dart' as p;

part 'src/ednet_code_generator.dart';

part 'src/doc_gen.dart';

part 'src/lib_gen.dart';

part 'src/test_gen.dart';

part 'src/web_gen.dart';

String libraryName = 'ednet_one';
String domainName = 'ednet';
String? outputDir;
String modelName = 'one';

late CoreRepository ednetCoreRepository;
late Domain ednetCoreDomain;
late Model ednetCoreModel;

String? modelJson;
String? yamlString;


part of ednet_code_generation;

void genPubspecTxt(File file) {
  final text = '''
name: ${domainName}_${modelName}
author: Your Name
homepage: http://ondart.me/
version: 0.0.1
description: ${domainName}_${modelName} application that uses ednet_core for its model.
environment:
  sdk: '>=3.0.3 <4.0.0'
dependencies:
  browser: '>=0.10.0 <0.11.0'
  ednet_core: '>=2.0.0 <3.0.0'
  yaml:
  # ednet_core_default_app: '>=2.0.0 <3.0.0'

dependencies:
  browser: '>=0.10.0 <0.11.0'
  ednet_core:
    git: 'https://github.com/context-dev/ednet_core.git'
  # ednet_core_default_app:
  #  git: 'https://github.com/context-dev/ednet_core_default_app.git'

dependencies:
  browser: '>=0.10.0 <0.11.0'
  ednet_core: ^0.0.1+2
  # ednet_core_default_app:
    # path: 'C:\\Users\\userName\\dart\\model\\ednet_core_default_app'

dependencies:
  browser: any
  ednet_core: ^0.0.1+2
  # ednet_core_default_app:
  #   path: /home/user_name/dart/model/ednet_core_default_app
  ''';
  addText(file, text);
}

void genGithub(File file) {
  final text = '''
github.txt for ${domainName}_${modelName}

GitHub, Git

https://github.com/
http://lifehacker.com/5983680/how-the-heck-do-i-use-github
http://www.codeschool.com/courses/try-git
http://git-scm.com/videos
http://marklodato.github.com/visual-git-guide/index-en.html
http://www.vogella.com/articles/Git/article.html
http://gitref.org/

Education

https://github.com/edu

Create an account at GitHub.

Read:

http://help.github.com/win-set-up-git/
http://www.ralfebert.de/blog/tools/git_screencast/
http://scottr.org/presentations/git-in-5-minutes/

-------------------------------------------------------------------------------

After creating an account, create a remote repository.

http://help.github.com/create-a-repo/

Create a New Repository at GitHub
(without README, since cloning will not be used).
Repository Name: ${domainName}_${modelName}
Description:
  Model generated by ednet_code_generation.

Please, replace johns (4x) by your GitHub account name.

Next steps:
  cd git/dart/${domainName}_${modelName}
  git init
  git status
  git add .
  git commit -m 'initial version'
  git remote add origin https://github.com/context-dev/${domainName}_${modelName}.git
  git push -u origin master

-------------------------------------------------------------------------------

Git with Git Bash

Clone a remote repository into a local repository.

cd git/dart
git clone https://github.com/context-dev/${domainName}_${modelName}.git
cd ${domainName}_${modelName}

Read+Write:
https://github.com/context-dev/${domainName}_${modelName}.git

Read only:
git://github.com/context-dev/${domainName}_${modelName}.git

Get the latest changes from the remote repository

git pull
or
git pull origin master

-------------------------------------------------------------------------------

Work with a local repository

cd git/dart/${domainName}_${modelName}

git status

git add .

git status

git commit -m 'short description'

git status

git rm file

git status

git push
or
git push origin master

git status

-------------------------------------------------------------------------------

Tagging for versions (spirals)

http://learn.github.com/p/tagging.html

git tag
git tag -a s00 -m 'spiral 00'
git tag

To push tags to the remote repository:

git push --tags

-------------------------------------------------------------------------------
  ''';
  addText(file, text);
}

void genDoc(String path) {
  final docPath = '${path}/doc';
  genDir(docPath);
  final pubspec = genFile('${docPath}/pubspec.txt');
  genPubspecTxt(pubspec);
  final specificChangesPath = '${docPath}/specific_changes';
  genDir(specificChangesPath);
  final gitPath = '${docPath}/git';
  genDir(gitPath);
  final github = genFile('${gitPath}/github.txt');
  genGithub(github);
}


part of ednet_code_generation;

void genDomainModelLibrary(File file) {
  addText(file, genEDNetLibrary(ednetCoreModel));
}

void genDomainModelAppLibrary(File file) {
  addText(file, genEDNetLibraryApp(ednetCoreModel));
}

void genEDNetCoreRepository(File file) {
  addText(file, genRepository(ednetCoreRepository, libraryName));
}

void genEDNetCoreModels(File file) {
  addText(file, genModels(ednetCoreDomain, libraryName));
}

void genEDNetCoreDomain(File file) {
  addText(file, genDomain(ednetCoreDomain, libraryName));
}

void genEDNetCoreEntries(File file) {
  addText(file, genEntries(ednetCoreModel, libraryName));
}

void genEDNetCoreModel(File file) {
  addText(file, genModel(ednetCoreModel, libraryName));
}

void genConceptEntitiesGen(File file, Concept concept) {
  addText(file, genConceptGen(concept, libraryName));
}

void genConceptEntities(File file, Concept concept) {
  addText(file, genConcept(concept, libraryName));
}

void genJsonData(File file) {
  var sc = 'part of ${domainName}_${modelName}; \n';
  sc = '${sc} \n';
  sc = '${sc}// http://www.json.org/ \n';
  sc = '${sc}// http://jsonformatter.curiousconcept.com/ \n';
  sc = '${sc} \n';
  sc = '${sc}// lib/${domainName}/${modelName}/json/data.dart \n';

  for (final entryConcept in ednetCoreModel.entryConcepts) {
    sc = '${sc}var ${domainName}${firstLetterToUpper(modelName)}'
        '${entryConcept.code}Entry = r""" \n';
    sc = '${sc} \n';
    sc = '${sc}"""; \n';
    sc = '${sc} \n';
  }

  sc = '${sc}var ${domainName}${firstLetterToUpper(modelName)}Model = r""" \n';
  sc = '${sc} \n';
  sc = '${sc}"""; \n';
  sc = '${sc} \n';

  addText(file, sc);
}

void genJsonModel(File file) {
  final text = """
part of ${domainName}_${modelName};

// http://www.json.org/
// http://jsonformatter.curiousconcept.com/

// lib/${domainName}/${modelName}/json/model.dart

var ${domainName}${firstLetterToUpper(modelName)}ModelJson = r'''
${modelJson ?? yamlString}
''';
  """;
  addText(file, text);
}

void genAll(String path) {
  final libPath = '${path}/lib';
  genDir(libPath);
  final repository = genFile('${libPath}/repository.dart');
  genEDNetCoreRepository(repository);
  final domainModelLibrary =
      genFile('${libPath}/${domainName}_${modelName}.dart');
  genDomainModelLibrary(domainModelLibrary);
  final domainModelAppLibrary =
      genFile('${libPath}/${domainName}_${modelName}_app.dart');
  genDomainModelAppLibrary(domainModelAppLibrary);

  final domainPath = '${libPath}/${domainName}';
  genDir(domainPath);
  final domain = genFile('${domainPath}/domain.dart');
  genEDNetCoreDomain(domain);

  final modelPath = '${domainPath}/${modelName}';
  genDir(modelPath);
  final model = genFile('${modelPath}/model.dart');
  genEDNetCoreModel(model);
  for (final concept in ednetCoreModel.concepts) {
    final conceptEntities =
        genFile('${modelPath}/${concept.codesLowerUnderscore}.dart');
    genConceptEntities(conceptEntities, concept);
  }

  final jsonPath = '${modelPath}/json';
  genDir(jsonPath);
  final jsonData = genFile('${jsonPath}/data.dart');
  genJsonData(jsonData);
  final jsonModel = genFile('${jsonPath}/model.dart');
  genJsonModel(jsonModel);

  genGen(path);
}

void genGen(String path) {
  final genPath = '${path}/lib/gen';
  genDir(genPath);

  final genDomainPath = '${genPath}/${domainName}';
  genDir(genDomainPath);
  final models = genFile('${genDomainPath}/i_domain_models.dart');
  genEDNetCoreModels(models);

  final genModelPath = '${genDomainPath}/${modelName}';
  genDir(genModelPath);
  final entries = genFile('${genModelPath}/model_entries.dart');
  genEDNetCoreEntries(entries);
  for (final concept in ednetCoreModel.concepts) {
    final conceptEntitiesGen =
        genFile('${genModelPath}/${concept.codesLowerUnderscore}.dart');
    genConceptEntitiesGen(conceptEntitiesGen, concept);
  }
}

void genLib(String gen, String path) {
  if (gen == '--genall') {
    genAll(path);
  } else {
    genGen(path);
  }
}


part of ednet_code_generation;

class EDNetCodeGenerator {
  static Future<String> generate({
    required String sourceDir,
    String targetDir = 'lib/generated/ednet',
    String domainName = 'ednet',
    required String models,
    File? yamlFile,
  }) async {
    createDomainModelFromYaml(
      dir: sourceDir,
      domain: domainName,
      model: models,
    );

    print('targetDir: $targetDir');
    // Generate the project for the domain model
    genProject('--genall', targetDir);

    return 'Code generation completed!';
  }

  static Future<MetaInfo> generateFromYaml({
    required String targetDir,
    required File yamlFile,
  }) async {
    createDomainModelFromLoadedYaml(yamlFile: yamlFile);

    print('targetDir: $targetDir');
    // Generate the project for the domain model
    genProject('--genall', targetDir);

    return MetaInfo(
      domain: domainName,
      model: modelName,
      dir: targetDir,
    );
  }
}

class MetaInfo {
  final String domain;
  final String model;
  final String dir;

  MetaInfo({
    required this.domain,
    required this.model,
    required this.dir,
  });
}

String firstLetterToUpper(String text) {
  return '${text[0].toUpperCase()}${text.substring(1)}';
}

Directory genDir(String path) {
  final dir = Directory(path);
  if (dir.existsSync()) {
    print('Directory ${path} already exists.');
    // deleting dir
    dir.deleteSync(recursive: true);
  }
  dir.createSync(recursive: true); // create all non-existent directories
  print('Directory created: ${path}');

  return dir;
}

File genFile(String path) {
  final file = File(path);
  if (file.existsSync()) {
    print('file ${path} exists already');
  } else {
    file.createSync();
    print('file created: ${path}');
  }
  return file;
}

void addText(File file, String text) {
  final writeSink = file.openWrite();
  writeSink.write(text);
  writeSink.close();
}

File getFile(String path) {
  return genFile(path);
}

String readTextFromFile(File file) {
  final fileText = file.readAsStringSync();
  return fileText;
}

void genGitignore(File file) {
  const text = '''
.DS_Store
.pub
build
packages
pubspec.lock
*~
  ''';
  addText(file, text);
}

void genReadme(File file) {
  var text = '';
  text = '${text}# ${domainName}_${modelName} \n';
  text = '${text}\n';
  text = '${text}**Categories**: ednet_core, domain models. \n';
  text = '${text}\n';
  text = '${text}## Description: \n';
  text = '${text}${domainName}_${modelName} project uses \n';
  text =
      '${text}[EDNetCore](https://github.com/context-dev/ednet_core) for the model.';
  addText(file, text);
}

void genPubspec(File file) {
  final text = '''
name: ${domainName}_${modelName}
version: 1.0.0

description: ${domainName}_${modelName} application that uses ednet_core for its model.

homepage: https://ednet.one/

environment:
  sdk: '>=3.0.0 <4.0.0'
  
dependencies:
  ednet_core: 
    path: ../../../../../../packages/core
  yaml:
  # ednet_core_default_app:
  
  ''';
  addText(file, text);
}

void genProject(String gen, String projectPath) {
  if (gen == '--genall') {
    genDir(projectPath);
    genDoc(projectPath);
    genLib(gen, projectPath);
    genTest(projectPath, ednetCoreModel);
    genWeb(projectPath);
    final gitignore = genFile('${projectPath}/.gitignore');
    genGitignore(gitignore);
    final readme = genFile('${projectPath}/README.md');
    genReadme(readme);
    final pubspec = genFile('${projectPath}/pubspec.yaml');
    genPubspec(pubspec);
  } else if (gen == '--gengen') {
    genLib(gen, projectPath);
  } else {
    print('valid gen argument is either --genall or --gengen');
  }
}

void createDomainModel(String projectPath) {
  final modelJsonFilePath = '${projectPath}/model.json';
  final modelJsonFile = getFile(modelJsonFilePath);
  modelJson = readTextFromFile(modelJsonFile);
  if (modelJson == null || modelJson?.length == 0) {
    print('missing json of the model');
  } else {
    ednetCoreRepository = CoreRepository();
    ednetCoreDomain = Domain(firstLetterToUpper(domainName));
    ednetCoreModel = fromJsonToModel(
        modelJson ?? '', ednetCoreDomain, firstLetterToUpper(modelName), null);
    ednetCoreRepository.domains.add(ednetCoreDomain);
  }
}

void createDomainModelFromLoadedYaml({
  required File yamlFile,
}) {
  yamlString = yamlFile.readAsStringSync();
  final yaml = loadYaml(yamlString!) as YamlMap;

  domainName = yaml['domain'] as String;
  modelName = yaml['model'] as String;

  libraryName = '${domainName}_${modelName}';

  if (yaml.length == 0) {
    print('missing YAML of the ${domainName} model ${modelName}');
  } else {
    ednetCoreRepository = CoreRepository();
    ednetCoreDomain = Domain(firstLetterToUpper(domainName));
    ednetCoreModel = fromJsonToModel(
        '', ednetCoreDomain, firstLetterToUpper(modelName), yaml);
    ednetCoreRepository.domains.add(ednetCoreDomain);
  }
}

void createDomainModelFromYaml({
  required String dir,
  required String domain,
  required String model,
}) {
  yamlString = loadYamlFile(
    domain: domain,
    model: model,
    dir: dir,
  );

  final yaml = loadYaml(yamlString!) as YamlMap;

  domain = yaml['domain'] as String;
  model = yaml['model'] as String;

  libraryName = libraryName.length > 0 ? libraryName : '${domain}_${model}';

  if (yaml.length == 0) {
    print('missing YAML of the ${domain} model ${model}');
  } else {
    ednetCoreRepository = CoreRepository();
    ednetCoreDomain = Domain(firstLetterToUpper(domainName));
    ednetCoreModel = fromJsonToModel(
        '', ednetCoreDomain, firstLetterToUpper(modelName), yaml);
    ednetCoreRepository.domains.add(ednetCoreDomain);
  }
}

/// --genall ~/projects/project domain model
/// --gengen ~/projects/project domain model
/// --gengen ~/projects/project/yaml ~/projects/project_mobile_app/domain domain model1 model2 ...
void main(List<String> args) {
  if (args.length >= 5 && (args[0] == '--genall' || args[0] == '--gengen')) {
    domainName = args[3];
    outputDir = args[2];
    domainName = domainName.toLowerCase();
    if (domainName == 'domain') {
      throw EDNetException('domain cannot be the domain name');
    }

    for (var i = 4; i < args.length; i++) {
      modelName = args[i].toLowerCase();
      if (modelName == 'model') {
        throw EDNetException('model cannot be the model name');
      }
      libraryName = '${domainName}_${modelName}';
      // displayYaml(domain: domainName, model: modelName, dir: args[1]);
      createDomainModelFromYaml(
        dir: args[1],
        domain: domainName,
        model: modelName,
      ); // project path as argument
      genProject(args[0], outputDir!);
    }
  } else if (args.length == 4 &&
      (args[0] == '--genall' || args[0] == '--gengen')) {
    domainName = args[2];
    modelName = args[3];
    domainName = domainName.toLowerCase();
    modelName = modelName.toLowerCase();
    if (domainName == modelName) {
      throw EDNetException('domain and model names must be different');
    }
    if (domainName == 'domain') {
      throw EDNetException('domain cannot be the domain name');
    }
    if (modelName == 'model') {
      throw EDNetException('model cannot be the model name');
    }
    libraryName = '${domainName}_${modelName}';
    createDomainModel(args[1]); // project path as argument
    genProject(args[0], args[1]);
  } else {
    print('arguments are not entered properly in Run/Manage Launches of IDE');
  }
}

void renderYaml(String yamlString, String outputTemplate) {
  if (yamlString.length == 0) {
    return;
  }
  final yaml = loadYaml(yamlString) as Map;
  final concepts = yaml['concepts'] as Iterable;
  for (final concept in concepts) {
    final conceptName = concept['name'] as String;
    print(outputTemplate
        .replaceAll('{conceptName}', conceptName)
        .replaceAll('{attributeName}', '')
        .replaceAll('{relationName}', ''));

    final attributes = concept['attributes'] as Iterable<Map>;
    for (final attribute in attributes) {
      final attributeName = attribute['name'] as String;
      print(outputTemplate
          .replaceAll('{conceptName}', conceptName)
          .replaceAll('{attributeName}', attributeName)
          .replaceAll('{relationName}', ''));
    }

    final relations = yaml['relations'] as Iterable;
    for (final relation in relations) {
      final from = relation['from'] as String;
      final to = relation['to'] as String;
      final fromToName = relation['fromToName'] as String;
      final toFromName = relation['toFromName'] as String;
      if (from == conceptName) {
        final relationName = '$fromToName $to';
        print(outputTemplate
            .replaceAll('{conceptName}', conceptName)
            .replaceAll('{attributeName}', '')
            .replaceAll('{relationName}', relationName));
      }
      if (to == conceptName) {
        final relationName = '$toFromName $from';
        print(outputTemplate
            .replaceAll('{conceptName}', conceptName)
            .replaceAll('{attributeName}', '')
            .replaceAll('{relationName}', relationName));
      }
    }
  }
}

String constructFilePath({
  required String domain,
  required String model,
  required String dir,
}) {
  return p.join(dir, domain, '$model.yaml');
}

String readFileContent(String filePath) {
  try {
    return File(filePath).readAsStringSync();
  } catch (e) {
    print('Error reading the file: $e');
    return '';
  }
}

String loadYamlFile({
  required String domain,
  required String model,
  required String dir,
}) {
  final filePath = constructFilePath(domain: domain, model: model, dir: dir);
  return readFileContent(filePath);
}

void displayY4aml({
  required String domain,
  required String model,
  required String dir,
}) {
  final yaml = loadYamlFile(
    domain: domain,
    model: model,
    dir: dir,
  );

  const outputTemplate = '''
|  Concept: {conceptName}
|    Attribute: {attributeName}
|    Relation: {relationName}
''';

  // renderYaml(yaml, outputTemplate);
}

void gen(String gen,
    {String? projectPath, String? dir, String? domain, String? model}) {
  if (gen == '--genall') {
    if (projectPath != null) {
      genDir(projectPath);
      genDoc(projectPath);
      genLib(gen, projectPath);
      genTest(projectPath, ednetCoreModel);
      genWeb(projectPath);
      final gitignore = genFile('${projectPath}/.gitignore');
      genGitignore(gitignore);
      final readme = genFile('${projectPath}/README.md');
      genReadme(readme);
      final pubspec = genFile('${projectPath}/pubspec.yaml');
      genPubspec(pubspec);
    } else {
      throw ArgumentError('projectPath is required when calling --genall');
    }
  } else if (gen == '--gengen') {
    if (projectPath != null) {
      genLib(gen, projectPath);
    } else if (dir != null && domain != null && model != null) {
      createDomainModelFromYaml(
        dir: dir,
        domain: domain,
        model: model,
      );
      if (outputDir != null) {
        genLib(gen, outputDir!);
      } else {
        throw ArgumentError(
            'outputDir is required when calling --gengen with dir, domain,'
            ' and model arguments');
      }
    } else {
      throw ArgumentError(
          'projectPath or dir, domain, and model arguments are required '
          'when calling --gengen');
    }
  } else {
    throw ArgumentError('valid gen argument is either --genall or --gengen');
  }
}


part of ednet_code_generation;

void genDomainModelWeb(File file) {
  addText(file, genEDNetWeb(ednetCoreModel));
}

void genDomainModelWebHtml(File file) {
  final text = '''
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8"/>
    <title>
      ${domainName}_${modelName}, developed with ednet_core.
    </title>
    <link rel="stylesheet" href="css/layout.css"/>
    <link rel="stylesheet" href="css/layout2.css"/>
    <link rel="stylesheet" href="css/link.css"/>
    <link rel="stylesheet" href="css/list.css"/>
    <link rel="stylesheet" href="css/menu.css"/>
    <link rel="stylesheet" href="css/page.css"/>
    <link rel="stylesheet" href="css/table.css"/>
  </head>
  <body>
    <header>
      <h2>
        ${domainName}_${modelName} in Dart with ednet_core
      </h2>
    </header>

    <section id="main">
      <header id='menu'/></header>
      <section id='entities'/></section>
      <footer>
        <a href="https://plus.google.com/+OndartMe">
          <img src="https://dl.dropbox.com/u/161496/dart/img/ondart3.png"/>
        </a>
        &nbsp;
        <a class="button" href="http://johns.github.io/">
          On Dart Blog
        </a>
      </footer>
    </section>

    <section id="side">
      <p>
        <span class="drop">The</span> ${domainName}_${modelName} app in
        <a  href="https://www.dartlang.org/" class="link">
          Dart.
        </a>
      </p>
      <p>
        <img src="img/${domainName}_${modelName}.png"/>
        The model is designed with
        <a  href="https://github.com/context-dev/model_concepts" class="link">
          Model Concepts.
        </a>
        The model code is generated by
        <a  href="https://github.com/context-dev/cms" class="link">
          EDNetCms ednet_code_generation.
        </a>
        The app
        <a  href="https://github.com/context-dev/${domainName}_${modelName}" class="link">
          code
        </a>
        is maintained at
        <a  href="https://github.com/" class="link">
          GitHub.
        </a>
      </p>
    </section>

    <script type="application/dart" src="${domainName}_${modelName}_web.dart"></script>
    <script src="packages/browser/dart.js"></script>
  </body>
</html>
  ''';
  addText(file, text);
}

void genLayout(File file) {
  const text = '''
/* layout.css */

/* ===[ begin ]=== */

/*
  Title:                   Basic Layout Design Style
  Influenced By:
  http://www.ehow.com/how_12007718_scroll-inside-html-canvas.html
  Created:                 2006-09-03
  Updated:                 2012-05-16
*/

  header {
    color: #663117;
    padding: 2px;
    background: #d7e9f7;
    text-align: center;
  }

  footer {
    font-family: arial, sans-serif;
    font-size: 12px;
    font-weight: bold;
    color: #ffffff;
    background: #663117;
    padding: 8px;
    border-top: 2px solid #999999;
  }

/* ===[ end ]=== */
  ''';
  addText(file, text);
}

void genLayout2(File file) {
  const text = '''
/* layout2c.css */

/* ===[ begin ]=== */

/*
  Title:                   2 Columns Layout Design Style
  Influenced By:           http://www.simplebits.com/
  Created:                 2006-09-03
  Updated:                 2011-12-09
*/

/* ===[ 2 columns layout ]=== */

  #main {
    float: left;
    width: 60%;
    background: #fffff0;
  }

  #side {
    float: right;
    width: 36%;
  }

/* ===[ end ]=== */
  ''';
  addText(file, text);
}

void genLink(File file) {
  const text = '''
/* link.css */

/* ===[ begin ]=== */

/*
  Title:                   Link Design Style
  Influenced By:           http://www.simplebits.com/
  Created:                 2006-09-03
  Updated:                 2011-12-23
*/

  a:link {
    text-decoration: none;
    font-weight: bold;
    color: #003366;
  }

  a:visited {
    text-decoration: none;
    font-weight: bold;
    color: #c50000;
  }

  a:hover {
    text-decoration: none;
    color: #d9ece2;
    background: #663117;
  }

  .button {
    padding: 1px;
    background: #ffcc99;
    border-right: 1px solid #999;
    border-bottom: 1px solid #999;
    border-style: outset;
    border-color: #d7b9c9;
    font-weight: bold;
    text-align: center;
  }


/* ===[ end ]=== */
  ''';
  addText(file, text);
}

void genList(File file) {
  const text = '''
/* list.css */

/* ===[ begin ]=== */

/*
  Title:                   List Design Style
  Influenced By:           http://www.simplebits.com/
  Created:                 2006-09-09
  Updated:                 2011-12-08
*/

  ul {
    list-style: none;
    padding: 2px;
    text-align: left;
  }

  li {
    padding-top: 1px;
    padding-bottom: 1px;
    padding-left: 18px;
  }

  .link li {
    background: url(https://dl.dropbox.com/u/161496/dart/img/arrow-right.gif) no-repeat 0 50%;
    padding-top: 1px;
    padding-bottom: 1px;
    padding-left: 18px;
  }

  .target li {
    background: url(https://dl.dropbox.com/u/161496/dart/img/target.gif) no-repeat 0 50%;
    padding-top: 1px;
    padding-bottom: 1px;
    padding-left: 18px;
  }

/* ===[ end ]=== */
  ''';
  addText(file, text);
}

void genMenu(File file) {
  const text = '''
/* menu.css */

/* ===[ begin ]=== */

/*
  Title:                  Menu Design Style
  Influenced By:
    http://www.devinrolsen.com/pure-css-horizontal-menu/
  Created:                2011-12-22
  Updated:                2012-01-04
*/

/* ===[ horizontal menu bar with menus and menu items ]=== */

  nav {
    width: 100%;
    height: 30px;
    font-weight: bold;
    color: #ffffff;
    background-color: #663117;
    border-top: 2px solid #999999;
  }

  nav ul {
    margin: 0px;
    padding: 0px;
  }

  nav ul li {
    display: inline;
    height: 30px;
    float: left;
    list-style: none;
    margin-left: 15px;
    position: relative;
  }

  nav ul li:hover {
    color: #d9ece2;
  }

  nav li ul {
    margin: 0px;
    padding-top: 8px;
    display: none;
    position: absolute;
    left: 0px;
    top: 20px;
    font-size: 14px;
    color: #d9ece2;
    background-color: #663117;
  }

  nav li:hover ul {
    display: block;
    width: 180px;
  }

  nav li li {
    padding: 0px;
    color: #ffffff;
    list-style: none;
    display: list-item;
  }

  nav li li a:link {
    text-decoration: none;
    font-weight: bold;
    color: #e6ffc8;
  }

  nav li li a:visited {
    text-decoration: none;
    font-weight: bold;
    color: #f2e1fb;
  }

  nav li li a:hover {
    text-decoration: none;
    color: #663117;
    background: #d9ece2;
  }

  nav li li button {
    color: #663117;
    font-size: 14px;
    font-weight: bold;
    background-color: #ffffff;
  }

  nav li li button:hover {
    background-color: #d9ece2;
  }

/* ===[ end ]=== */
  ''';
  addText(file, text);
}

void genPage(File file) {
  const text = '''
/* page.css */

/* ===[ begin ]=== */

/*
  Title:                   Web Page Design Style
  Influenced By:           http://www.simplebits.com/
  Created:                 2006-09-03
  Updated:                 2012-05-16
*/

  body {
    font-family: verdana, arial, helvetica, sans-serif;
    font-size: 16px;
    background: #d9ece2;
    width: 1000px;
    margin-left: auto;
    margin-right: auto;
    padding:10px;
  }

  section {
    padding: 5px;
  }

  p {
    line-height: 1.5em;
    text-align: justify;
    margin-left: 2px;
    margin-right: 2px;
  }

  .drop {
    float: left;
    font-size: 150%;
    line-height: 1em;
    margin: 4px 8px 8px 0px;
    padding: 4px 8px;
    border: 2px solid #cccccc;
    background: #fffff0;
  }

/* ===[ end ]=== */
  ''';
  addText(file, text);
}

void genTable(File file) {
  const text = '''
/* table.css */

/* ===[ begin ]=== */

/*
    Title:                   Table Design Style
    Influenced By:           http://www.simplebits.com/
    Created:                 2006-09-03
    Updated:                 2012-08-29
*/

  table {
    border-top: 1px solid #999;
    border-left: 1px solid #999;
    border-collapse: collapse;
    margin-left: auto;
    margin-right: auto;
  }

  caption {
    font-family: arial, sans-serif;
    font-size: 14px;
    font-weight: bold;
    color: #003366;
    padding: 6px;
    margin-left: auto;
    margin-right: auto;
  }

  th, td {
    padding: 4px;
    border-right: 1px solid #999;
    border-bottom: 1px solid #999;
  }

  th {
    font-family: Verdana, sans-serif;
    font-weight: bold;
    color: #ffffff;
        background: #663117;
  }

  td {
    background: #ffe4b5;
  }

/* ===[ end ]=== */
  ''';
  addText(file, text);
}

void genWeb(String path) {
  final webPath = '${path}/web';
  genDir(webPath);

  final cssPath = '${webPath}/css';
  genDir(cssPath);

  final cssImgPath = '${cssPath}/img';
  genDir(cssImgPath);

  final imgPath = '${webPath}/img';
  genDir(imgPath);

  final domainPath = '${webPath}/${domainName}';
  genDir(domainPath);

  final modelPath = '${domainPath}/${modelName}';
  genDir(modelPath);
  final domainModelWeb =
      genFile('${modelPath}/${domainName}_${modelName}_web.dart');
  genDomainModelWeb(domainModelWeb);
  final domainModelWebHtml =
      genFile('${modelPath}/${domainName}_${modelName}_web.html');
  genDomainModelWebHtml(domainModelWebHtml);

  final modelCssPath = '${modelPath}/css';
  genDir(modelCssPath);
  final layout = genFile('${modelCssPath}/layout.css');
  genLayout(layout);
  final layout2 = genFile('${modelCssPath}/layout2.css');
  genLayout2(layout2);
  final link = genFile('${modelCssPath}/link.css');
  genLink(link);
  final list = genFile('${modelCssPath}/list.css');
  genList(list);
  final menu = genFile('${modelCssPath}/menu.css');
  genMenu(menu);
  final page = genFile('${modelCssPath}/page.css');
  genPage(page);
  final table = genFile('${modelCssPath}/table.css');
  genTable(table);

  final modelCssImgPath = '${modelCssPath}/img';
  genDir(modelCssImgPath);

  final modelImgPath = '${modelPath}/img';
  genDir(modelImgPath);
}


part of ednet_code_generation;

void genDomainModelGen(File file) {
  addText(file, genEDNetGen(ednetCoreModel));
}

void genDomainModelTest(File file, Concept entryConcept) {
  addText(
      file, genEDNetTest(ednetCoreRepository, ednetCoreModel, entryConcept));
}

void genTest(String path, Model ednetCoreModel) {
  final testPath = '${path}/test';
  genDir(testPath);

  final domainPath = '${testPath}/${domainName}';
  genDir(domainPath);

  final modelPath = '${domainPath}/${modelName}';
  genDir(modelPath);
  final domainModelGen =
      genFile('${modelPath}/${domainName}_${modelName}_gen.dart');
  genDomainModelGen(domainModelGen);
  for (final entryConcept in ednetCoreModel.entryConcepts) {
    final domainModelTest = genFile('${modelPath}/${domainName}_${modelName}_'
        '${entryConcept.codeLowerUnderscore}_test.dart');
    genDomainModelTest(domainModelTest, entryConcept);
  }
}


