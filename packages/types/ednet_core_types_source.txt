name: ednet_core_types

homepage: https://ednet.dev/
version: 0.0.1

description: a generic Flutter component done by meta-programming in EDNetCore.

environment:
  sdk: '>=3.7.0 <4.0.0'

dependencies:
  ednet_core:
    path: ../core
  ednet_core_default_app:
    path: ../../../ednet_core_default_app


dev_dependencies:
  build_runner: ^2.4.0
  build_web_compilers: ^4.0.4



part of ednet_core_types_app;

class TypesApp {
  late TypesEntries model;

  TypesApp(EDNetCoreModels domain) {
    model = domain.getModelEntries('Types') as TypesEntries;
    _load(model);
    EntitiesTableWc(this, model.types);
  }

  void _load(TypesEntries model) {
    final json = window.localStorage['ednet_core_types_data'];
    if (json != null && model.isEmpty) {
      model.fromJson(json);
    }
  }

  void save() {
    window.localStorage['ednet_core_types_data'] = model.toJson();
  }
}

part of entities_table_wc;

class EntityTable {
  late List<Attribute> nonIncrementAttributes;
  Entities entities;
  Entity? currentEntity;

  var table = querySelector('#entity-table');
  var addButton = querySelector('#add-button');
  var updateButton = querySelector('#update-button');
  var removeButton = querySelector('#remove-button');
  var cancelButton = querySelector('#cancel-button');

  EntitiesTable entitiesTable;

  EntityTable(this.entitiesTable, this.entities) {
    nonIncrementAttributes = entities.concept.nonIncrementAttributes;
    addEventHandlers();
    display();
    firstField().focus();
  }

  void addEventHandlers() {
    (addButton)?.onClick.listen(addEntity);
    updateButton?.onClick.listen(updateEntity);
    removeButton?.onClick.listen(removeEntity);
    cancelButton?.onClick.listen(cancelCommand);
  }

  void display() {
    addCaption();
    for (final attribute in nonIncrementAttributes) {
      addRow(attribute);
    }
  }

  void addCaption() {
    final tableCaption = TableCaptionElement();
    tableCaption.text = entities.concept.label;
    table?.nodes.add(tableCaption);
  }

  void addRow(Attribute attribute) {
    final row = Element.tr();

    final thElement = Element.th();
    thElement.text = attribute.label;
    row.nodes.add(thElement);

    final tdElement = Element.td();
    var element;
    if (attribute.type?.code == 'bool') {
      element = CheckboxInputElement();
    } else if (attribute.type?.code == 'Description') {
      element = TextAreaElement();
      element.classes.add('entity-table area');
    } else {
      element = InputElement();
    }
    if (attribute.required) {
      element.attributes['required'] = 'required';
    }
    if (attribute.length > 0) {
      element.attributes['size'] = attribute.length.toString();
    }
    if (attribute.type?.code == 'Email') {
      element.attributes['type'] = 'email';
    }
    tdElement.nodes.add(element);
    row.nodes.add(tdElement);

    row.id = attribute.oid.toString();
    table?.nodes.add(row);
  }

  dynamic firstField() {
    return (table as TableElement).rows[0].nodes[1].nodes[0];
  }

  dynamic rowField(TableRowElement row) {
    return row.nodes[1].nodes[0];
  }

  TableRowElement? findRow(Attribute attribute) {
    for (var i = 0; i < (table as TableElement).rows.length; i++) {
      final row = (table as TableElement).rows[i];
      if (row.id == attribute.oid.toString()) {
        return row;
      }
    }
    return null;
  }

  void setRow(var entity, Attribute attribute) {
    final dRow = findRow(attribute);
    final field = rowField(dRow!);
    final attributeValue = entity.getStringOrNullFromAttribute(attribute.code);
    if (attribute.type?.code == 'bool') {
      if (attributeValue == 'true') {
        field.checked = true;
      } else {
        field.checked = false;
      }
    } else {
      field.value = attributeValue;
    }
  }

  void emptyData() {
    for (var i = 0; i < (table as TableElement).rows.length; i++) {
      final row = (table as TableElement).rows[i];
      final field = rowField(row);
      final attribute = getAttribute(row);
      if (attribute?.type?.code == 'bool') {
        field.checked = false;
      } else {
        field.value = '';
      }
    }
  }

  Property? getAttribute(var row) {
    final oid = Oid.ts(int.parse(row.id));
    return entities.concept.attributes.singleWhereOid(oid);
  }

  void setEntity(var entity) {
    for (final attribute in nonIncrementAttributes) {
      setRow(entity, attribute);
    }
    currentEntity = entity;
  }

  void addEntity(MouseEvent e) {
    final newEntity = entities.newEntity();
    for (final attribute in nonIncrementAttributes) {
      final row = findRow(attribute);
      if (attribute.type?.code == 'bool') {
        newEntity.setAttribute(attribute.code, rowField(row!).checked);
      } else {
        final value = rowField(row!).value;
        if (value != '') {
          if (attribute.type?.validate(value)) {
            newEntity.setStringToAttribute(attribute.code, value);
          }
        }
      }
    }
    entities.add(newEntity);
    entitiesTable.display();
    entitiesTable.save();
    setEntity(newEntity);
    firstField().focus();
  }

  void updateEntity(MouseEvent e) {
    final nonIdentifierAttributes =
        currentEntity?.concept.nonIdentifierAttributes;
    if (nonIdentifierAttributes == null) {
      return;
    }

    for (final attribute in nonIdentifierAttributes) {
      if (attribute.increment == null) {
        final row = findRow(attribute);
        if (attribute.type?.code == 'bool') {
          currentEntity?.setAttribute(attribute.code, rowField(row!).checked);
        } else {
          final value = rowField(row!).value;
          if (attribute.required) {
            if (value != '') {
              if (attribute.type?.validate(value)) {
                currentEntity?.setStringToAttribute(attribute.code, value);
              }
            }
          } else {
            if (value != '') {
              if (attribute.type?.validate(value)) {
                currentEntity?.setStringToAttribute(attribute.code, value);
              }
            } else {
              currentEntity?.setStringToAttribute(attribute.code, 'N/A');
            }
          }
        }
      }
    }
    entitiesTable.display();
    entitiesTable.save();
    firstField().focus();
  }

  void removeEntity(MouseEvent e) {
    if (removeButton?.text == 'Remove') {
      removeButton?.text = 'Confirm';
    } else {
      final removed = entities.remove(currentEntity as Entity);
      assert(removed);
      entitiesTable.display();
      entitiesTable.save();
      emptyData();
      firstField().focus();
      currentEntity = null;
      removeButton?.text = 'Remove';
    }
  }

  void cancelCommand(MouseEvent e) {
    emptyData();
    firstField().focus();
    currentEntity = null;
  }
}

part of entities_table_wc;

class EntitiesTable {
  late Entities entities;
  late List<Attribute> essentialAttributes;

  var table = querySelector('#entities-table');

  var context;

  EntitiesTable(this.context, this.entities) {
    essentialAttributes = entities.concept.essentialAttributes;
    final incrementAttributes = entities.concept.incrementAttributes;
    var idIncrementAttribute = false;
    for (final attribute in incrementAttributes) {
      if (attribute.identifier) {
        idIncrementAttribute = true;
        break;
      }
    }
    if (idIncrementAttribute) {
      display(sort: false);
    } else {
      display();
    }
    addEventHandlers();
  }

  void addEventHandlers() {
    final identifierAttributes = entities.concept.identifierAttributes;
    for (final attribute in identifierAttributes) {
      final hRow = table!.nodes[1] as TableRowElement;
      for (final thElement in hRow.nodes as List<TableCellElement>) {
        if (thElement.text == attribute.code) {
          thElement.onClick.listen((MouseEvent e) {
            entities.sort((e1, e2) {
              final v1 = e1.getAttribute(attribute.code);
              final v2 = e2.getAttribute(attribute.code);
              return v1.compareTo(v2);
            });
            display(sort: false);
          });
        }
      }
    }
  }

  void display({sort = true}) {
    removeRows();
    addCaption();
    addHeaderRow();
    if (sort) {
      entities.sort();
    }
    for (final entity in entities) {
      addDataRow(entity as Entity);
    }
  }

  void removeRows() {
    table?.nodes.clear();
  }

  void addCaption() {
    final tableCaption = TableCaptionElement();
    tableCaption.text = entities.concept.labels;
    table?.nodes.add(tableCaption);
  }

  void addHeaderRow() {
    final hRow = Element.tr() as TableRowElement;
    for (final attribute in essentialAttributes) {
      final thElement = Element.th() as TableCellElement;
      thElement.text = attribute.label;
      hRow.nodes.add(thElement);
    }
    table?.nodes.add(hRow);
  }

  void addDataRow(Entity entity) {
    final dRow = Element.tr() as TableRowElement;

    for (final attribute in essentialAttributes) {
      final tdElement = Element.td() as TableCellElement;
      final value = entity.getAttribute(attribute.code);
      if (value != null) {
        tdElement.text = entity.getAttribute(attribute.code).toString();
      }
      dRow.nodes.add(tdElement);
    }

    dRow.id = entity.oid.toString();
    dRow.onClick.listen(selectEntity);
    table?.nodes.add(dRow);
  }

  void selectEntity(MouseEvent e) {
    final dRow = (e.target as TableCellElement).parent;
    final idn = int.parse(dRow!.id);
    final entity = entities.singleWhereOid(Oid.ts(idn));
    context.entityTable.setEntity(entity);
  }

  void save() {
    context.save();
  }
}

library entities_table_wc;



part 'entities_table_wc/entities_table.dart';
part 'entities_table_wc/entity_table.dart';

class EntitiesTableWc {
  var app;

  late EntitiesTable entitiesTable;
  late EntityTable entityTable;

  EntitiesTableWc(this.app, var entities) {
    entitiesTable = EntitiesTable(this, entities);
    entityTable = EntityTable(entitiesTable, entities);
  }

  void save() {
    app.save();
  }
}

part of ednet_core_types;


class CoreType extends TypeGen {
  CoreType(Concept concept) : super(concept);

  CoreType.withId(Concept concept, int sequence)
      : super.withId(concept, sequence);


}

class CoreTypes extends TypesGen {
  CoreTypes(Concept concept) : super(concept);


}

part of ednet_core_types;


var ednetCoreTypesTypeEntry = r'''
 
''';

var ednetCoreTypesModel = r'''
 
''';

part of ednet_core_types;



var ednetCoreTypesModelJson = r'''
{
   "width":990,
   "height":580,
   "concepts":[
      {
         "name":"CoreType",
         "entry":true,
         "x":207,
         "y":236,
         "width":120,
         "height":200,
         "attributes":[
            {
               "sequence":10,
               "name":"sequence",
               "category":"identifier",
               "type":"int",
               "init":"increment",
               "essential":true,
               "sensitive":false
            },
            {
               "sequence":20,
               "name":"title",
               "category":"required",
               "type":"String",
               "init":"",
               "essential":true,
               "sensitive":false
            },
            {
               "sequence":30,
               "name":"email",
               "category":"attribute",
               "type":"Email",
               "init":"",
               "essential":false,
               "sensitive":false
            },
            {
               "sequence":40,
               "name":"started",
               "category":"attribute",
               "type":"DateTime",
               "init":"now",
               "essential":true,
               "sensitive":false
            },
            {
               "sequence":50,
               "name":"price",
               "category":"attribute",
               "type":"double",
               "init":"0",
               "essential":false,
               "sensitive":false
            },
            {
               "sequence":60,
               "name":"qty",
               "category":"attribute",
               "type":"num",
               "init":"",
               "essential":false,
               "sensitive":false
            },
            {
               "sequence":70,
               "name":"completed",
               "category":"attribute",
               "type":"bool",
               "init":"false",
               "essential":false,
               "sensitive":false
            },
            {
               "sequence":80,
               "name":"whatever",
               "category":"attribute",
               "type":"dynamic",
               "init":"",
               "essential":false,
               "sensitive":false
            },
            {
               "sequence":90,
               "name":"web",
               "category":"attribute",
               "type":"Uri",
               "init":"",
               "essential":false,
               "sensitive":false
            },
            {
               "sequence":100,
               "name":"other",
               "category":"attribute",
               "type":"Other",
               "init":"",
               "essential":false,
               "sensitive":false
            },
            {
               "sequence":110,
               "name":"note",
               "category":"attribute",
               "type":"Description",
               "init":"",
               "essential":false,
               "sensitive":false
            }
         ]
      }
   ],
   "relations":[

   ]
}
''';

part of ednet_core_types;


class TypesModel extends TypesEntries {
  TypesModel(Model model) : super(model);

  void fromJsonToTypeEntry() {
    fromJsonToEntry(ednetCoreTypesTypeEntry);
  }

  void fromJsonToModel() {
    fromJson(ednetCoreTypesModel);
  }

  void init() {
    initTypes();
  }

  void initTypes() {
    final type1 = CoreType(types.concept);
    type1.title = 'selfdo';
    type1.email = 'brian@walker.com';
    type1.started = DateTime.now();
    type1.price = 60.33402414399765;
    type1.qty = 976.7749678702379;
    type1.completed = true;
    type1.whatever = 'energy';
    type1.web = Uri.parse('http://www.mendeley.com/');
    type1.other = 'darts';
    type1.note = 'call';
    types.add(type1);

    final type2 = CoreType(types.concept);
    type2.title = 'tape';
    type2.email = 'ahmed@stewart.com';
    type2.started = DateTime.now();
    type2.price = 45.84212437433066;
    type2.qty = 766;
    type2.completed = true;
    type2.whatever = 'kids';
    type2.web = Uri.parse(
        'http://www.houseplans.com/plan/640-square-feet-1-bedroom-1-bathroom-0-garage-modern-38327');
    type2.other = 'flower';
    type2.note = 'message';
    types.add(type2);

    final type3 = CoreType(types.concept);
    type3.title = 'left';
    type3.email = 'bill@mitchell.com';
    type3.started = DateTime.now();
    type3.price = 53.010108242554466;
    type3.qty = 298;
    type3.completed = false;
    type3.whatever = 'entertainment';
    type3.web = Uri.parse('http://www.jasondavies.com/maps/rotate/');
    type3.other = 'thing';
    type3.note = 'lake';
    types.add(type3);
  }


}

part of ednet_core_types;


class EDNetCoreDomain extends EDNetCoreModels {
  EDNetCoreDomain(Domain domain) : super(domain);


}

part of ednet_core_types;


abstract class TypeGen extends Entity<CoreType> {
  TypeGen(Concept concept) {
    this.concept = concept;
  }

  TypeGen.withId(Concept concept, int sequence) {
    this.concept = concept;
    setAttribute('sequence', sequence);
  }

  int get sequence => getAttribute('sequence');

  set sequence(int a) => setAttribute('sequence', a);

  String get title => getAttribute('title');

  set title(String a) => setAttribute('title', a);

  String get email => getAttribute('email');

  set email(String a) => setAttribute('email', a);

  DateTime get started => getAttribute('started');

  set started(DateTime a) => setAttribute('started', a);

  double get price => getAttribute('price');

  set price(double a) => setAttribute('price', a);

  num get qty => getAttribute('qty');

  set qty(num a) => setAttribute('qty', a);

  bool get completed => getAttribute('completed');

  set completed(bool a) => setAttribute('completed', a);

  dynamic get whatever => getAttribute('whatever');

  set whatever(a) => setAttribute('whatever', a);

  Uri get web => getAttribute('web');

  set web(Uri a) => setAttribute('web', a);

  dynamic get other => getAttribute('other');

  set other(a) => setAttribute('other', a);

  String get note => getAttribute('note');

  set note(String a) => setAttribute('note', a);

  @override
  CoreType newEntity() => CoreType(concept);

  @override
  CoreTypes newEntities() => CoreTypes(concept);

  int sequenceCompareTo(CoreType other) {
    return sequence.compareTo(other.sequence);
  }
}

abstract class TypesGen extends Entities<CoreType> {
  TypesGen(Concept concept) {
    this.concept = concept;
  }

  @override
  CoreTypes newEntities() => CoreTypes(concept);

  @override
  CoreType newEntity() => CoreType(concept);
}

part of ednet_core_types;


class TypesEntries extends ModelEntries {
  TypesEntries(Model model) : super(model);

  @override
  Map<String, Entities> newEntries() {
    final entries = Map<String, Entities>();
    var concept;
    concept = model.concepts.singleWhereCode('CoreType');
    entries['CoreType'] = CoreTypes(concept);
    return entries;
  }

  @override
  Entities? newEntities(String conceptCode) {
    final concept = model.concepts.singleWhereCode(conceptCode);
    if (concept == null) {
      throw ConceptError('${conceptCode} concept does not exist.');
    }
    if (concept.code == 'CoreType') {
      return CoreTypes(concept);
    }
    return null;
  }

  @override
  Entity? newEntity(String conceptCode) {
    final concept = model.concepts.singleWhereCode(conceptCode);
    if (concept == null) {
      throw ConceptError('${conceptCode} concept does not exist.');
    }
    if (concept.code == 'CoreType') {
      return CoreType(concept);
    }
    return null;
  }

  CoreTypes get types => getEntry('CoreType') as CoreTypes;
}

part of ednet_core_types;


class EDNetCoreModels extends DomainModels {
  EDNetCoreModels(Domain domain) : super(domain) {

    final model =
        fromJsonToModel(ednetCoreTypesModelJson, domain, 'Types', null);
    final typesModel = TypesModel(model);
    add(typesModel);
  }
}

