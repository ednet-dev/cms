name: EDNetDev

# Package definitions in dependency order
packages:
  - "packages/core" # Base package
  - "packages/code_generation" # First level
  - "packages/types" # First level
  - "packages/ednet_flow" # First level
  - "packages/openapi" # First level
  - "packages/cms" # Second level
  - "packages/ednet_core_flutter" # Second level
  - "packages/drift" # Second level
  - "packages/content" # Apps
  - "apps/*" # Other apps

# Publishing order documentation
# 1. Core Package (Base):
#    - ednet_core (must be published first as others depend on it)
#
# 2. First Level Packages:
#    - ednet_code_generation (depends on core)
#    - ednet_core_types (depends on core)
#    - ednet_flow (depends on core)
#    - ednet_openapi (depends on core)
#
# 3. Second Level Packages:
#    - ednet_cms (depends on core, code_generation)
#    - ednet_core_flutter (depends on core)
#    - ednet_drift (depends on core)
#
# 4. Apps and Content:
#    - content package
#    - other apps

command:
  version:
    # Generate commit links in changelogs
    linkToCommits: true
    # Only allow versioning on main branch
    branch: main
    # Create workspace changelog
    workspaceChangelog: true
  bootstrap:
    runPubGetInParallel: true
    enforceLockfile: true
    environment:
      sdk: ">=3.0.0 <4.0.0"

ide:
  intellij:
    enabled: true

scripts:
  analyze:
    run: melos exec -- "flutter analyze"
    description: Run flutter analyze in all packages

  analyze:core:
    run: melos exec --scope="core" -- "dart analyze"
    description: Run Dart analyze for the core package in this project.

  format:
    run: melos exec -- "flutter format . --set-exit-if-changed"
    description: Format all code

  format:core:
    run: melos exec --scope="core" -- "dart format . --set-exit-if-changed"
    description: Run Dart format for the core package in this project.

  test:
    run: melos exec --dir-exists="test" --fail-fast -- "flutter test --no-pub --coverage"
    description: Run all tests in this project.

  test:core:
    run: melos exec --scope="core" -- "dart test --coverage='coverage'"
    description: Run Dart tests for the core package in this project.

  test:dart:
    run: melos exec --dir-exists="test" --no-private --fail-fast -- dart test --coverage="coverage"
    description: Run Dart tests for a specific package in this project.

  publish:dry:
    run: melos publish --scope="ednet_cms" --dry-run
    description: Dry run of publishing ednet_cms to pub.dev.

  publish:
    run: melos publish --scope="ednet_cms" --no-dry-run
    description: Publish ednet_cms to pub.dev.

  publish:dry:core:
    run: melos publish --scope="core" --dry-run
    description: Dry run of publishing core to pub.dev.

  test:filter:
    run: melos exec --dir-exists="test" --scope="*$SCOPE*" -- "flutter test --no-pub --coverage"
    description: Run tests in packages matching the SCOPE filter

  outdated:
    run: melos exec -- "dart pub outdated"
    description: Check for outdated dependencies in all packages

  upgrade:
    run: melos exec -- "dart pub upgrade"
    description: Upgrade dependencies in all packages

  clean:
    run: melos exec -- "flutter clean"
    description: Clean build artifacts in all packages

  # Publishing workflow scripts
  publish:all:
    description: "Publish all packages in the correct order"
    run: |
      echo "Publishing packages in order..."
      echo "1. Publishing core package..."
      melos run publish:core
      echo "2. Publishing first level dependencies..."
      melos run publish:code_generation
      melos run publish:core_types
      melos run publish:flow
      echo "3. Publishing second level dependencies..."
      melos run publish:cms

  publish:check:
    description: "Check package versions and dependencies"
    run: |
      echo "Checking package versions..."
      melos list
      echo "Checking for outdated dependencies..."
      melos run outdated

  # Publish ednet_core
  publish:core:
    description: "Publish ednet_core package (create tag, push, and publish)"
    run: |
      melos version --manual-version="ednet_core:$VERSION" && \
      git add . && \
      git commit -m "chore(release): ðŸš€ ednet_core release v$VERSION" && \
      git tag ednet_core-v$VERSION && \
      git push origin main --tags && \
      melos publish --scope="ednet_core" --no-dry-run

  # Publish ednet_cms
  publish:cms:
    description: "Publish ednet_cms package (create tag, push, and publish)"
    run: |
      melos version --manual-version="ednet_cms:$VERSION" && \
      git add . && \
      git commit -m "chore(release): ðŸš€ ednet_cms release v$VERSION" && \
      git tag ednet_cms-v$VERSION && \
      git push origin main --tags && \
      melos publish --scope="ednet_cms" --no-dry-run

  # Publish ednet_code_generation
  publish:code_generation:
    description: "Publish ednet_code_generation (without affecting dependent packages)"
    run: |
      melos version --manual-version="ednet_code_generation:$VERSION" --no-dependents && \
      git add . && \
      git commit -m "chore(release): ðŸš€ ednet_code_generation release v$VERSION" && \
      git tag ednet_code_generation-v$VERSION && \
      git push origin main --tags && \
      melos publish --scope="ednet_code_generation" --no-dry-run

  # Publish ednet_core_types
  publish:core_types:
    description: "Publish ednet_core_types package (create tag, push, and publish)"
    run: |
      melos version --manual-version="ednet_core_types:$VERSION" && \
      git add . && \
      git commit -m "chore(release): ðŸš€ ednet_core_types release v$VERSION" && \
      git tag ednet_core_types-v$VERSION && \
      git push origin main --tags && \
      melos publish --scope="ednet_core_types" --no-dry-run

  # Publish ednet_flow
  publish:flow:
    description: "Publish ednet_flow package (create tag, push, and publish)"
    run: |
      melos version --manual-version="ednet_flow:$VERSION" && \
      git add . && \
      git commit -m "chore(release): ðŸš€ ednet_flow release v$VERSION" && \
      git tag ednet_flow-v$VERSION && \
      git push origin main --tags && \
      melos publish --scope="ednet_flow" --no-dry-run

  # Publish ednet_core_patterns
  publish:core_patterns:
    description: "Publish ednet_core_patterns package (create tag, push, and publish)"
    run: |
      melos version --manual-version="ednet_core_patterns:$VERSION" && \
      git add . && \
      git commit -m "chore(release): ðŸš€ ednet_core_patterns release v$VERSION" && \
      git tag ednet_core_patterns-v$VERSION && \
      git push origin main --tags && \
      melos publish --scope="ednet_core_patterns" --no-dry-run

  # Publish ednet_content
  publish:content:
    description: "Publish ednet_content package (create tag, push, and publish)"
    run: |
      melos version --manual-version="ednet_content:$VERSION" && \
      git add . && \
      git commit -m "chore(release): ðŸš€ ednet_content release v$VERSION" && \
      git tag ednet_content-v$VERSION && \
      git push origin main --tags && \
      melos publish --scope="ednet_content" --no-dry-run
